> Problem: [1161. 最大层内元素和](https://leetcode.cn/problems/maximum-level-sum-of-a-binary-tree/description/)

[TOC]

# 思路

> BFS其实在另一种程度上也可以使用队列来解决

# 解题方法

> 使用队列存储$TreeNode*$，每一次仅循环这一层的节点
> 但我们怎么获得这一层节点的数量呢？
> 队列里面是不断添加元素的，所以需要用$size$变量来保存当前队列大小，也就是这一层的节点数量

# 复杂度

时间复杂度:

> 时间复杂度：$O(n)$

空间复杂度:

> 空间复杂度：$O(n)$

# Code

* []

```C++
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int maxLevelSum(TreeNode* root) {
        queue<TreeNode*> q;
        int maxval = INT_MIN;
        int ans = 1;
        q.push(root);
        int number = 0;
        int sum;
        while (!q.empty()) {
            int size = q.size();
            sum = 0;
            for (int i = 0; i < size; i++) {
                TreeNode* temp = q.front();
                q.pop();
                sum += temp->val;
                if (temp->left)
                    q.push(temp->left);
                if (temp->right)
                    q.push(temp->right);
            }
            number++;
            cout << sum << endl;
            if (sum > maxval) {
                maxval = sum;
                ans = number;
            }
        }
        return ans;
    }
};
```

