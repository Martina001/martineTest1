/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        if(null == lists || lists.length == 0){
            return null;
        }
        return mergeK(lists,0,lists.length-1);
    }
    private ListNode mergeK(ListNode[] lists,int l,int r){
        if(l == r){
            return lists[l];
        }
        int mid =(l+r)>>1;
        ListNode lNode = mergeK(lists,l,mid);
        ListNode rNode = mergeK(lists,mid+1,r);
        return mergeTwo(lNode,rNode);
    }
    private ListNode mergeTwo(ListNode a,ListNode b){
        if(null == a){
            return b;
        }
        if(null == b){
            return a;
        }
        ListNode dummy = new ListNode(-1);
        ListNode cur = dummy;
        while(a != null && b!= null){
            if(a.val < b.val){
                cur.next = a;
                a = a.next;
            }else{
                cur.next = b;
                b = b.next;
            }
            cur = cur.next;
        }
        if(a != null){
            cur.next = a;
        }
        if(b != null){
            cur.next = b;
        }
        return dummy.next;
    }
}
//runtime:1 ms
//memory:43.2 MB
