class Solution {
    public int rob(int[] nums) {
        // 重点在定义，定义dp[i]为从i开始打劫得到的最大分数，那么后面需要有两个虚拟的房间
        int n = nums.length;
       /* int dp[] = new int[n+2];
        dp[n+1]= 0;
        dp[n] = 0;
        for(int i = n-1;i >=0;i--){
            dp[i] = Math.max(dp[i+1],dp[i+2]+nums[i]);
        }
        return dp[0];*/
        // 我们再来尝试一下定义dp[i]为打劫了i家时的最大分数 那么dp[0]就是0，dp[1]就是num[0] dp[2]=Max(dp[1],nums[1]+dp[0])
        // 所以 dp[i] = Max(dp[i-1],dp[i-2]+num[i-1])
        int dp[] = new int[n+1];
        dp[0] = 0;
        dp[1] = nums[0];
        for(int i = 2;i <=n;i++){
            dp[i] = Math.max(dp[i-1],dp[i-2]+nums[i-1]);
        }
        return dp[n];
    }
}

//runtime:0 ms
//memory:40.1 MB
