> Problem: [63. 不同路径 II](https://leetcode.cn/problems/unique-paths-ii/description/)

[TOC]

# 思路

> 讲述看到这一题的思路

# 解题方法

> 描述你的解题方法

# 复杂度

时间复杂度:

> 添加时间复杂度, 示例： $O(n)$

空间复杂度:

> 添加空间复杂度, 示例： $O(n)$

# Code

* []

```Java
class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        if(obstacleGrid[0][0]==1){
            return 0;
        }
        int n=obstacleGrid.length,m=obstacleGrid[0].length;
        int [][]dp=new int[n][m];
        for(int i=0;i<n;i++){//遍历第一列赋值为1表示可以通行，障碍物直接跳出，
            if(obstacleGrid[i][0]==1){
                break;
            }
            dp[i][0]=1;
        }
        for(int i=0;i<m;i++){//遍历第一行赋值为1表示可以通行，障碍物直接跳出，
            if(obstacleGrid[0][i]==1){
                break;
            }
            dp[0][i]=1;
        }
        for(int i=1;i<n;i++){
            for(int j=1;j<m;j++){
                if(obstacleGrid[i][j]==0){//如果当前有障碍物，变为0表示怎么都到达不了这里，没有障碍物就累加上一行当前列的路径数和当前行上一列的路劲数
                    dp[i][j]=dp[i-1][j]+dp[i][j-1];
                }else{
                    dp[i][j]=0;
                }
            }
        }
        return dp[n-1][m-1];
    }
}
```

