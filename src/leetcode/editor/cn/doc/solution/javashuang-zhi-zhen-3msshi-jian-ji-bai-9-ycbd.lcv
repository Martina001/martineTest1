# JAVA双指针，3ms，时间击败90+，待进一步优化

***首先想到的也是java字符串不可变，即使用StringBiuld或StringBuffer其实也是一直在生成新字符串，所以干脆先转换成char[]字符数组，这样就回到了熟悉的数组题双指针解法了。

慢指针i记录每个单词首字母位置，快指针寻找下一个空格，找到以后将中间的单词内容完成反转（此处没采用reverse方法），第一次测试发现最后一个单词翻转不过来，就先在最开始拼了个空格到末尾，最后再用trim()去除，此处又降低了时间空间效率，但总体复杂度没变，应该也还能优化。***

# 代码

* 

```
class Solution {
    public String reverseWords(String s) {
        //给末尾也拼上一个空格再转字符数组，否则最后一个单词会逆转失败
        char[] chars = (s+" ").toCharArray();
        int i=0, j=0;
        //以快指针到达末尾为结束条件
        while(j<chars.length){
            //快指针未指向空格便一直向前寻找空格
            if(chars[j]!=32){
                j++;
            //快指针已找到空格
            }else if(chars[j]==32){
                int space = j;
                j--;
                //快指针往回走，与慢指针共同实现单个单词反转
                while(i<j){                   
                    char temp=chars[i];
                    chars[i]=chars[j];
                    chars[j]=temp;
                    i++;
                    j--;
                }
                //将快慢指针都置为前面存储的空格位置+1，翻转下一个单词
                //若已经超出数组长度则无法进入下一次循环，代表完成全部翻转
                i=space+1;
                j=space+1;
            }
        }
        //转成字符串并去除最后空格
        return String.valueOf(chars).trim();
    }
}
```

# 参照官解的循环条件，简单修改，省去了拼末尾空格和去除空格的时间，节约了1毫秒，时间击败100，if else再套while的结构不好看，有兴趣也可改造成多while写法，原理和复杂度不会变

* 

```
public String reverseWords(String s) {
        char[] chars = s.toCharArray();
    int len = chars.length;
    int i=0, j=0;
    //以快指针到达末尾为结束条件
    while(j<=len){
        //快指针未到末尾+1且未指向空格
        if(j<len && chars[j]!=32){
            j++;
        //快指针已达到数组末尾+1或找到空格
        }else if(j==len || chars[j]==32){
            int space = j;
            j--;
            //快指针往回走，与慢指针共同实现单个单词反转
            while(i<j){                   
                char temp=chars[i];
                chars[i]=chars[j];
                chars[j]=temp;
                i++;
                j--;
            }
            //将快慢指针都置为前面存储的空格位置+1，翻转下一个单词
            //若已经超出数组长度则无法进入下一次循环，代表完成全部翻转
            i=space+1;
            j=space+1;
        }
    }
    //转成字符串
    return String.valueOf(chars);
}
```

